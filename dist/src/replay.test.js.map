{"version":3,"sources":["../../src/replay.test.js"],"names":["emptyProfile","require","singleRequest","multipleRequests","jest","mock","reset","fn","setup","use","describe","profileRequest","request","response","baseProfileRequest","method","url","headers","abc","xyz","content","baseRequest","_url","_method","_headers","_body","baseResponse","_status","beforeEach","resetAllMocks","JSON","parse","stringify","it","expect","toBe","submitRequestData","calls","toMatchSnapshot","headersToOmit","config","debuggingEnabled","debugPort","WILDCARD_MARKER","body","buildRepeatableMockFunction","mockImplementation","mockFunction","xhrMock","toBeCalled","toEqual","repeatMode"],"mappings":"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","file":"replay.test.js","sourcesContent":["import xhrMock from 'xhr-mock';\nimport replay, { matchingFunction, requestMatches } from './replay';\nimport { WILDCARD_MARKER } from './stringSimilarity';\nimport submitRequestData from './submitRequest';\nimport buildRepeatableMockFunction from './repeatableMockFunctionBuilder';\n\nconst emptyProfile = require('./fixtures/profiles/no-requests');\nconst singleRequest = require('./fixtures/profiles/single-request');\nconst multipleRequests = require('./fixtures/profiles/multiple-requests');\n\njest.mock('xhr-mock', () => ({\n  reset: jest.fn(),\n  setup: jest.fn(),\n  use: jest.fn(),\n}));\n\njest.mock('./submitRequest', () => jest.fn());\njest.mock('./repeatableMockFunctionBuilder', () => jest.fn());\n\ndescribe('replay', () => {\n  let profileRequest;\n  let request;\n  let response;\n\n  const baseProfileRequest = {\n    method: 'GET',\n    url: 'http://www.someurl.com',\n    headers: {\n      abc: ['123'],\n      xyz: ['456'],\n    },\n    content: 'body',\n  };\n\n  const baseRequest = {\n    _url: 'http://www.someurl.com',\n    _method: 'GET',\n    _headers: {\n      abc: ['123'],\n      xyz: ['456'],\n    },\n    _body: 'body',\n  };\n\n  const baseResponse = {\n    _status: 200,\n    _headers: {\n      abc: ['321'],\n    },\n    _body: 'body1',\n  };\n\n  describe('requestMatches', () => {\n    beforeEach(() => {\n      jest.resetAllMocks();\n\n      profileRequest = JSON.parse(JSON.stringify(baseProfileRequest));\n      request = JSON.parse(JSON.stringify(baseRequest));\n      response = JSON.parse(JSON.stringify(baseResponse));\n    });\n\n    it('should match a standard request on all factors and an empty matching config', () => {\n      expect(requestMatches({}, profileRequest, request)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should match a standard request on all factors and a null matching config', () => {\n      expect(requestMatches(null, profileRequest, request)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should match a standard request on all factors and a matching config with headers to omit', () => {\n      profileRequest.headers.xyz = 'something else';\n      expect(requestMatches({ headersToOmit: ['xyz'] }, profileRequest, request)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should match a standard request on all factors and a matching config with debugging enabled', () => {\n      const config = { debuggingEnabled: true, debugPort: 9091 };\n\n      expect(requestMatches(config, profileRequest, request)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should match a standard request on all factors with a fuzzy url', () => {\n      profileRequest.url = `http://www.${WILDCARD_MARKER}.com`;\n      expect(requestMatches({}, profileRequest, request)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should match a standard request on all factors with a fuzzy header', () => {\n      profileRequest.headers.abc = [`1${WILDCARD_MARKER}3`];\n      expect(requestMatches({}, profileRequest, request)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should match a standard request on all factors with a fuzzy body', () => {\n      profileRequest.body = `b${WILDCARD_MARKER}y`;\n      expect(requestMatches({}, profileRequest, request)).toBe(true);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should not match a standard request because the URL doesn\\'t match', () => {\n      profileRequest.url = 'bad';\n      expect(requestMatches({}, profileRequest, request)).toBe(false);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should not match a standard request because the headers don\\'t match', () => {\n      profileRequest.headers.abc = 'bad';\n      expect(requestMatches({}, profileRequest, request)).toBe(false);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should not match a standard request because the method doesn\\'t match', () => {\n      profileRequest.method = 'bad';\n      expect(requestMatches({}, profileRequest, request)).toBe(false);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should not match a standard request because the body doesn\\'t match', () => {\n      profileRequest.method = 'POST';\n      profileRequest.content = 'bad';\n      expect(requestMatches({}, profileRequest, request)).toBe(false);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n  });\n\n  describe('matchingFunction', () => {\n    beforeEach(() => {\n      jest.resetAllMocks();\n\n      profileRequest = JSON.parse(JSON.stringify(baseProfileRequest));\n      request = JSON.parse(JSON.stringify(baseRequest));\n      response = JSON.parse(JSON.stringify(baseResponse));\n    });\n\n    it('should return the correct mock function when everything matches and debugging is enabled', () => {\n      buildRepeatableMockFunction.mockImplementation(() => () => 'correct mock function');\n\n      const mockFunction = matchingFunction({ debuggingEnabled: true }, null, profileRequest, null, null);\n\n      expect(mockFunction(request, response)).toBe('correct mock function');\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should provide the correct mock function when everything matches and debugging is disabled', () => {\n      buildRepeatableMockFunction.mockImplementation(() => () => 'correct mock function');\n\n      const mockFunction = matchingFunction({ }, null, profileRequest, null, null);\n\n      expect(mockFunction(request, response)).toBe('correct mock function');\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n\n    it('should provide the mocking function that returns false when something doesn\\'t match', () => {\n      const mockFunction = matchingFunction({ }, null, profileRequest, null, null);\n\n      profileRequest.url = 'something different';\n\n      expect(mockFunction(request, response)).toBe(false);\n      expect(submitRequestData.mock.calls).toMatchSnapshot();\n    });\n  });\n\n  describe('default', () => {\n    beforeEach(() => {\n      jest.resetAllMocks();\n    });\n\n    it('should mock requests for an empty profile', () => {\n      replay(emptyProfile, {});\n\n      expect(xhrMock.reset).toBeCalled();\n      expect(xhrMock.setup).toBeCalled();\n      expect(xhrMock.use.mock.calls).toEqual([]);\n    });\n\n    it('should mock requests for a profile with a single request', () => {\n      replay(singleRequest, {});\n\n      expect(xhrMock.reset).toBeCalled();\n      expect(xhrMock.setup).toBeCalled();\n      expect(xhrMock.use.mock.calls).toMatchSnapshot();\n    });\n\n    it('should mock requests for a profile with two requests and the default repeat mode', () => {\n      replay(multipleRequests, {});\n\n      expect(xhrMock.reset).toBeCalled();\n      expect(xhrMock.setup).toBeCalled();\n      expect(xhrMock.use.mock.calls).toMatchSnapshot();\n    });\n\n    it('should mock requests for a profile with two requests and a repeat mode of \\'first\\'', () => {\n      replay(multipleRequests, { repeatMode: 'first' });\n\n      expect(xhrMock.reset).toBeCalled();\n      expect(xhrMock.setup).toBeCalled();\n      expect(xhrMock.use.mock.calls).toMatchSnapshot();\n    });\n\n    it('should mock requests for a profile with two requests and a repeat mode of \\'last\\'', () => {\n      replay(multipleRequests, { repeatMode: 'last' });\n\n      expect(xhrMock.reset).toBeCalled();\n      expect(xhrMock.setup).toBeCalled();\n      expect(xhrMock.use.mock.calls).toMatchSnapshot();\n    });\n  });\n});\n"]}