{"version":3,"sources":["../../src/repeatableMockFunctionBuilder.test.js"],"names":["buildRequest","method","url","request","jest","mock","once","fn","describe","requests","response","statusCode","headers","content","ResponseBuilder","status","body","beforeEach","resetAllMocks","it","repeatMap","expect","calls","toMatchSnapshot","config","repeatMode","not","toHaveBeenCalled","invocations"],"mappings":"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","file":"repeatableMockFunctionBuilder.test.js","sourcesContent":["import { once } from 'xhr-mock';\nimport buildRepeatMap from './requestRepeatMapBuilder';\nimport buildRepeatableMockFunction from './repeatableMockFunctionBuilder';\nimport buildRequestId from './requestIdBuilder';\n\nconst buildRequest = (method, url) => ({ request: { method, url } });\n\njest.mock('xhr-mock', () => ({\n  once: jest.fn(),\n}));\n\ndescribe('repeatableMockFunctionBuilder', () => {\n  const requests = [\n    buildRequest('GET', 'http://some.url'),\n    buildRequest('GET', 'http://some.url'),\n  ];\n\n  const response = {\n    statusCode: 200,\n    headers: [],\n    content: 'something',\n  };\n\n  // Dummy builder to satisfy the buildResponse function\n  class ResponseBuilder {\n    constructor() { this.response = ''; }\n\n    status(status) { this.response = `${this.response} ${status}`; return this; }\n\n    headers(headers) { this.response = `${this.response} ${headers}`; return this; }\n\n    body(body) { this.response = `${this.response} ${body}`; return this; }\n  }\n\n  beforeEach(() => {\n    jest.resetAllMocks();\n  });\n\n  it('should build a function when no input is given', () => {\n    const repeatMap = buildRepeatMap(requests);\n    const { request } = requests[0];\n\n    buildRepeatableMockFunction(null, repeatMap, request, response);\n\n    expect(once.mock.calls[0][0](null, new ResponseBuilder())).toMatchSnapshot();\n  });\n\n  it('should build a function when a repeatMode of \\'first\\' is given', () => {\n    const repeatMap = buildRepeatMap(requests);\n    const { request } = requests[0];\n    const config = { repeatMode: 'FIRST' };\n\n    expect(\n      buildRepeatableMockFunction(config, repeatMap, request, response)(null, new ResponseBuilder()),\n    ).toMatchSnapshot();\n    expect(once).not.toHaveBeenCalled();\n  });\n\n  it('should build a function when a repeatMode of \\'last\\' is given '\n    + 'and invocations do not exceed the number of repeats', () => {\n    const repeatMap = buildRepeatMap(requests);\n    const { request } = requests[0];\n    const config = { repeatMode: 'LAST' };\n\n    buildRepeatableMockFunction(config, repeatMap, request, response);\n\n    expect(once.mock.calls[0][0](null, new ResponseBuilder())).toMatchSnapshot();\n  });\n\n  it('should build a function when a repeatMode of \\'last\\' is given '\n    + 'and invocations exceed the number of repeats', () => {\n    const repeatMap = buildRepeatMap(requests);\n    const { request } = requests[0];\n    const config = { repeatMode: 'LAST' };\n\n    repeatMap[buildRequestId(request)].invocations = 3;\n\n    expect(\n      buildRepeatableMockFunction(config, repeatMap, request, response)(null, new ResponseBuilder()),\n    ).toMatchSnapshot();\n    expect(once).not.toHaveBeenCalled();\n  });\n});\n"]}