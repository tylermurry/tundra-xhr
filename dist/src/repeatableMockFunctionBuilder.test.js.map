{"version":3,"sources":["../../src/repeatableMockFunctionBuilder.test.js"],"names":["buildRequest","method","url","request","describe","requests","response","statusCode","headers","content","it","repeatMap","expect","toMatchSnapshot","config","repeatMode","invocations"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,eAAe,SAAfA,YAAe,CAACC,MAAD,EAASC,GAAT;AAAA,SAAkB,EAAEC,SAAS,EAAEF,cAAF,EAAUC,QAAV,EAAX,EAAlB;AAAA,CAArB;;AAEAE,SAAS,+BAAT,EAA0C,YAAM;AAC9C,MAAMC,WAAW,CACfL,aAAa,KAAb,EAAoB,iBAApB,CADe,EAEfA,aAAa,KAAb,EAAoB,iBAApB,CAFe,CAAjB;;AAKA,MAAMM,WAAW;AACfC,gBAAY,GADG;AAEfC,aAAS,EAFM;AAGfC,aAAS;AAHM,GAAjB;;AAMAC,KAAG,gDAAH,EAAqD,YAAM;AACzD,QAAMC,YAAY,uCAAeN,QAAf,CAAlB;AADyD,QAEjDF,OAFiD,GAErCE,SAAS,CAAT,CAFqC,CAEjDF,OAFiD;;;AAIzDS,gBAAU,6CAA4B,IAA5B,EAAkCD,SAAlC,EAA6CR,OAA7C,EAAsDG,QAAtD,CAAV,EAA6EO,eAA7E;AACD,GALD;;AAOAH,KAAG,iEAAH,EAAsE,YAAM;AAC1E,QAAMC,YAAY,uCAAeN,QAAf,CAAlB;AAD0E,QAElEF,OAFkE,GAEtDE,SAAS,CAAT,CAFsD,CAElEF,OAFkE;;AAG1E,QAAMW,SAAS,EAAEC,YAAY,OAAd,EAAf;;AAEAH,gBAAU,6CAA4BE,MAA5B,EAAoCH,SAApC,EAA+CR,OAA/C,EAAwDG,QAAxD,CAAV,EAA+EO,eAA/E;AACD,GAND;;AAQAH,KAAG,oEACC,qDADJ,EAC2D,YAAM;AAC/D,QAAMC,YAAY,uCAAeN,QAAf,CAAlB;AAD+D,QAEvDF,OAFuD,GAE3CE,SAAS,CAAT,CAF2C,CAEvDF,OAFuD;;AAG/D,QAAMW,SAAS,EAAEC,YAAY,MAAd,EAAf;;AAEAH,gBAAU,6CAA4BE,MAA5B,EAAoCH,SAApC,EAA+CR,OAA/C,EAAwDG,QAAxD,CAAV,EAA+EO,eAA/E;AACD,GAPD;;AASAH,KAAG,oEACC,8CADJ,EACoD,YAAM;AACxD,QAAMC,YAAY,uCAAeN,QAAf,CAAlB;AADwD,QAEhDF,OAFgD,GAEpCE,SAAS,CAAT,CAFoC,CAEhDF,OAFgD;;AAGxD,QAAMW,SAAS,EAAEC,YAAY,MAAd,EAAf;;AAEAJ,cAAU,gCAAeR,OAAf,CAAV,EAAmCa,WAAnC,GAAiD,CAAjD;;AAEAJ,gBAAU,6CAA4BE,MAA5B,EAAoCH,SAApC,EAA+CR,OAA/C,EAAwDG,QAAxD,CAAV,EAA+EO,eAA/E;AACD,GATD;AAUD,CA9CD","file":"repeatableMockFunctionBuilder.test.js","sourcesContent":["import buildRepeatMap from './requestRepeatMapBuilder';\nimport buildRepeatableMockFunction from './repeatableMockFunctionBuilder';\nimport buildRequestId from './requestIdBuilder';\n\nconst buildRequest = (method, url) => ({ request: { method, url } });\n\ndescribe('repeatableMockFunctionBuilder', () => {\n  const requests = [\n    buildRequest('GET', 'http://some.url'),\n    buildRequest('GET', 'http://some.url'),\n  ];\n\n  const response = {\n    statusCode: 200,\n    headers: [],\n    content: 'something',\n  };\n\n  it('should build a function when no input is given', () => {\n    const repeatMap = buildRepeatMap(requests);\n    const { request } = requests[0];\n\n    expect(`${buildRepeatableMockFunction(null, repeatMap, request, response)}`).toMatchSnapshot();\n  });\n\n  it('should build a function when a repeatMode of \\'first\\' is given', () => {\n    const repeatMap = buildRepeatMap(requests);\n    const { request } = requests[0];\n    const config = { repeatMode: 'FIRST' };\n\n    expect(`${buildRepeatableMockFunction(config, repeatMap, request, response)}`).toMatchSnapshot();\n  });\n\n  it('should build a function when a repeatMode of \\'last\\' is given '\n    + 'and invocations do not exceed the number of repeats', () => {\n    const repeatMap = buildRepeatMap(requests);\n    const { request } = requests[0];\n    const config = { repeatMode: 'LAST' };\n\n    expect(`${buildRepeatableMockFunction(config, repeatMap, request, response)}`).toMatchSnapshot();\n  });\n\n  it('should build a function when a repeatMode of \\'last\\' is given '\n    + 'and invocations exceed the number of repeats', () => {\n    const repeatMap = buildRepeatMap(requests);\n    const { request } = requests[0];\n    const config = { repeatMode: 'LAST' };\n\n    repeatMap[buildRequestId(request)].invocations = 3;\n\n    expect(`${buildRepeatableMockFunction(config, repeatMap, request, response)}`).toMatchSnapshot();\n  });\n});\n"]}