{"version":3,"sources":["../../src/replay.js"],"names":["DEFAULT_CONFIG","debuggingEnabled","debugPort","buildRequest","request","response","url","_url","toString","headers","_headers","method","_method","content","_body","statusCode","_status","requestMatches","matchingConfig","profileRequest","headersToOmit","requestHeaders","JSON","stringify","profileRequestHeaders","urlMatches","bodyMatches","headersMatch","methodMatches","matchingFunction","requestRepeatMap","realXHR","repeatableMockFunction","req","res","everythingMatches","profileRequests","config","global","XMLHttpRequest","xhrMock","setup","reset","defaultedConfig","repeatMap","forEach","invocations","use","toLowerCase","RegExp"],"mappings":"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","file":"replay.js","sourcesContent":["/* eslint-disable no-underscore-dangle */\n\nimport 'url';\nimport xhrMock from 'xhr-mock';\nimport omit from 'lodash.omit';\nimport buildRequestRepeatMap from './requestRepeatMapBuilder';\nimport stringIsSimilarTo from './stringSimilarity';\nimport buildRequestId from './requestIdBuilder';\nimport removeURLPrefix from './removeURLPrefix';\nimport submitRequestData from './submitRequest';\nimport buildRepeatableMockFunction from './repeatableMockFunctionBuilder';\n\nconst DEFAULT_CONFIG = {\n  debuggingEnabled: true,\n  debugPort: 9091,\n};\n\nconst buildRequest = (request, response) => ({\n  request: request ? {\n    url: request._url.toString(),\n    headers: request._headers,\n    method: request._method,\n    content: request._body,\n  } : null,\n  response: response ? {\n    headers: response._headers,\n    statusCode: response._status,\n    content: response._body,\n  } : null,\n});\n\nexport const requestMatches = (matchingConfig, profileRequest, request) => {\n  const headersToOmit = matchingConfig ? matchingConfig.headersToOmit : null;\n  const requestHeaders = JSON.stringify(omit(request._headers, headersToOmit));\n  const profileRequestHeaders = JSON.stringify(omit(profileRequest.headers, headersToOmit));\n\n  const urlMatches = stringIsSimilarTo(removeURLPrefix(profileRequest.url), removeURLPrefix(request._url.toString()));\n  const bodyMatches = request._method !== 'GET' ? stringIsSimilarTo(profileRequest.content, request._body) : true;\n  const headersMatch = stringIsSimilarTo(profileRequestHeaders, requestHeaders);\n  const methodMatches = request._method === profileRequest.method;\n\n  return urlMatches && methodMatches && bodyMatches && headersMatch;\n};\n\nexport const matchingFunction = (matchingConfig, requestRepeatMap, request, response, realXHR) => {\n  const repeatableMockFunction = buildRepeatableMockFunction(matchingConfig, requestRepeatMap, request, response);\n\n  return (req, res) => {\n    const everythingMatches = requestMatches(matchingConfig, request, req);\n\n    if (matchingConfig && matchingConfig.debuggingEnabled) {\n      submitRequestData(\n        buildRequest(req, res),\n        matchingConfig.debugPort,\n        everythingMatches,\n        realXHR,\n      );\n    }\n\n    if (everythingMatches) {\n      return repeatableMockFunction(req, res);\n    }\n    return false;\n  };\n};\n\nexport default (profileRequests, config) => {\n  const realXHR = global.XMLHttpRequest;\n\n  xhrMock.setup();\n  xhrMock.reset();\n\n  const defaultedConfig = { ...DEFAULT_CONFIG, ...config };\n  const repeatMap = buildRequestRepeatMap(profileRequests);\n\n  profileRequests.forEach(({ request, response }) => {\n    const requestRepeatMap = repeatMap[buildRequestId(request)];\n    requestRepeatMap.invocations += 1;\n\n    xhrMock.use(\n      request.method.toLowerCase(),\n      new RegExp('.*'),\n      matchingFunction(defaultedConfig, repeatMap, request, response, realXHR),\n    );\n  });\n};\n"]}