{"version":3,"sources":["../../src/replay.js"],"names":["DEFAULT_CONFIG","debuggingEnabled","debugPort","requestMatches","matchingConfig","profileRequest","request","headersToOmit","requestHeaders","JSON","stringify","_headers","profileRequestHeaders","headers","urlMatches","url","_url","toString","bodyMatches","_method","content","_body","headersMatch","methodMatches","method","matchingFunction","requestRepeatMap","response","realXHR","repeatableMockFunction","req","res","everythingMatches","profileRequests","config","global","XMLHttpRequest","xhrMock","setup","reset","defaultedConfig","repeatMap","forEach","invocations","use","toLowerCase","RegExp"],"mappings":";;;;;;;kQAAA;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,iBAAiB;AACrBC,oBAAkB,IADG;AAErBC,aAAW;AAFU,CAAvB;;AAKO,IAAMC,0CAAiB,SAAjBA,cAAiB,CAACC,cAAD,EAAiBC,cAAjB,EAAiCC,OAAjC,EAA6C;AACzE,MAAMC,gBAAgBH,iBAAiBA,eAAeG,aAAhC,GAAgD,IAAtE;AACA,MAAMC,iBAAiBC,KAAKC,SAAL,CAAe,sBAAKJ,QAAQK,QAAb,EAAuBJ,aAAvB,CAAf,CAAvB;AACA,MAAMK,wBAAwBH,KAAKC,SAAL,CAAe,sBAAKL,eAAeQ,OAApB,EAA6BN,aAA7B,CAAf,CAA9B;;AAEA,MAAMO,aAAa,gCAAkB,+BAAgBT,eAAeU,GAA/B,CAAlB,EAAuD,+BAAgBT,QAAQU,IAAR,CAAaC,QAAb,EAAhB,CAAvD,CAAnB;AACA,MAAMC,cAAcZ,QAAQa,OAAR,KAAoB,KAApB,GAA4B,gCAAkBd,eAAee,OAAjC,EAA0Cd,QAAQe,KAAlD,CAA5B,GAAuF,IAA3G;AACA,MAAMC,eAAe,gCAAkBV,qBAAlB,EAAyCJ,cAAzC,CAArB;AACA,MAAMe,gBAAgBjB,QAAQa,OAAR,KAAoBd,eAAemB,MAAzD;;AAEA,SAAOV,cAAcS,aAAd,IAA+BL,WAA/B,IAA8CI,YAArD;AACD,CAXM;;AAaA,IAAMG,8CAAmB,SAAnBA,gBAAmB,CAACrB,cAAD,EAAiBsB,gBAAjB,EAAmCpB,OAAnC,EAA4CqB,QAA5C,EAAsDC,OAAtD,EAAkE;AAChG,MAAMC,yBAAyB,6CAA4BzB,cAA5B,EAA4CsB,gBAA5C,EAA8DpB,OAA9D,EAAuEqB,QAAvE,CAA/B;;AAEA,SAAO,UAACG,GAAD,EAAMC,GAAN,EAAc;AACnB,QAAMC,oBAAoB7B,eAAeC,cAAf,EAA+BE,OAA/B,EAAwCwB,GAAxC,CAA1B;;AAEA,QAAI1B,kBAAkBA,eAAeH,gBAArC,EAAuD;AACrD,mCACE,8BAAa6B,GAAb,EAAkBC,GAAlB,CADF,EAEE3B,eAAeF,SAFjB,EAGE8B,iBAHF,EAIEJ,OAJF;AAMD;;AAED,QAAII,iBAAJ,EAAuB;AACrB,aAAOH,uBAAuBC,GAAvB,EAA4BC,GAA5B,CAAP;AACD;AACD,WAAO,KAAP;AACD,GAhBD;AAiBD,CApBM;;kBAsBQ,UAACE,eAAD,EAAkBC,MAAlB,EAA6B;AAC1C,MAAMN,UAAUO,OAAOC,cAAvB;;AAEAC,oBAAQC,KAAR;AACAD,oBAAQE,KAAR;;AAEA,MAAMC,+BAAuBxC,cAAvB,EAA0CkC,MAA1C,CAAN;AACA,MAAMO,YAAY,uCAAsBR,eAAtB,CAAlB;;AAEAA,kBAAgBS,OAAhB,CAAwB,gBAA2B;AAAA,QAAxBpC,OAAwB,QAAxBA,OAAwB;AAAA,QAAfqB,QAAe,QAAfA,QAAe;;AACjD,QAAMD,mBAAmBe,UAAU,gCAAenC,OAAf,CAAV,CAAzB;AACAoB,qBAAiBiB,WAAjB,IAAgC,CAAhC;;AAEAN,sBAAQO,GAAR,CACEtC,QAAQkB,MAAR,CAAeqB,WAAf,EADF,EAEE,IAAIC,MAAJ,CAAW,IAAX,CAFF,EAGErB,iBAAiBe,eAAjB,EAAkCC,SAAlC,EAA6CnC,OAA7C,EAAsDqB,QAAtD,EAAgEC,OAAhE,CAHF;AAKD,GATD;AAUD,C","file":"replay.js","sourcesContent":["/* eslint-disable no-underscore-dangle */\n\nimport 'url';\nimport xhrMock from 'xhr-mock';\nimport omit from 'lodash.omit';\nimport buildRequestRepeatMap from './requestRepeatMapBuilder';\nimport stringIsSimilarTo from './stringSimilarity';\nimport buildRequestId from './requestIdBuilder';\nimport removeURLPrefix from './removeURLPrefix';\nimport submitRequestData from './submitRequest';\nimport buildRepeatableMockFunction from './repeatableMockFunctionBuilder';\nimport buildRequest from './requestBuilder';\n\nconst DEFAULT_CONFIG = {\n  debuggingEnabled: true,\n  debugPort: 9091,\n};\n\nexport const requestMatches = (matchingConfig, profileRequest, request) => {\n  const headersToOmit = matchingConfig ? matchingConfig.headersToOmit : null;\n  const requestHeaders = JSON.stringify(omit(request._headers, headersToOmit));\n  const profileRequestHeaders = JSON.stringify(omit(profileRequest.headers, headersToOmit));\n\n  const urlMatches = stringIsSimilarTo(removeURLPrefix(profileRequest.url), removeURLPrefix(request._url.toString()));\n  const bodyMatches = request._method !== 'GET' ? stringIsSimilarTo(profileRequest.content, request._body) : true;\n  const headersMatch = stringIsSimilarTo(profileRequestHeaders, requestHeaders);\n  const methodMatches = request._method === profileRequest.method;\n\n  return urlMatches && methodMatches && bodyMatches && headersMatch;\n};\n\nexport const matchingFunction = (matchingConfig, requestRepeatMap, request, response, realXHR) => {\n  const repeatableMockFunction = buildRepeatableMockFunction(matchingConfig, requestRepeatMap, request, response);\n\n  return (req, res) => {\n    const everythingMatches = requestMatches(matchingConfig, request, req);\n\n    if (matchingConfig && matchingConfig.debuggingEnabled) {\n      submitRequestData(\n        buildRequest(req, res),\n        matchingConfig.debugPort,\n        everythingMatches,\n        realXHR,\n      );\n    }\n\n    if (everythingMatches) {\n      return repeatableMockFunction(req, res);\n    }\n    return false;\n  };\n};\n\nexport default (profileRequests, config) => {\n  const realXHR = global.XMLHttpRequest;\n\n  xhrMock.setup();\n  xhrMock.reset();\n\n  const defaultedConfig = { ...DEFAULT_CONFIG, ...config };\n  const repeatMap = buildRequestRepeatMap(profileRequests);\n\n  profileRequests.forEach(({ request, response }) => {\n    const requestRepeatMap = repeatMap[buildRequestId(request)];\n    requestRepeatMap.invocations += 1;\n\n    xhrMock.use(\n      request.method.toLowerCase(),\n      new RegExp('.*'),\n      matchingFunction(defaultedConfig, repeatMap, request, response, realXHR),\n    );\n  });\n};\n"]}