{"version":3,"sources":["../../src/requestRepeatMapBuilder.test.js"],"names":["describe","buildRequest","method","url","request","it","requests","expect","toEqual","repeated","invocations"],"mappings":";;AAAA;;;;AACA;;;;;;;;AAEAA,SAAS,yBAAT,EAAoC,YAAM;AACxC,MAAMC,eAAe,SAAfA,YAAe,CAACC,MAAD,EAASC,GAAT;AAAA,WAAkB,EAAEC,SAAS,EAAEF,cAAF,EAAUC,QAAV,EAAX,EAAlB;AAAA,GAArB;;AAEAE,KAAG,sDAAH,EAA2D,YAAM;AAC/D,QAAMC,WAAW,CACfL,aAAa,KAAb,EAAoB,iBAApB,CADe,CAAjB;;AAIAM,WAAO,uCAAwBD,QAAxB,CAAP,EAA0CE,OAA1C,qBACG,gCAAeF,SAAS,CAAT,EAAYF,OAA3B,CADH,EACyC;AACrCK,gBAAU,CAD2B;AAErCC,mBAAa;AAFwB,KADzC;AAMD,GAXD;;AAaAL,KAAG,wDAAH,EAA6D,YAAM;AACjE,QAAMC,WAAW,CACfL,aAAa,KAAb,EAAoB,iBAApB,CADe,EAEfA,aAAa,KAAb,EAAoB,iBAApB,CAFe,CAAjB;;AAKAM,WAAO,uCAAwBD,QAAxB,CAAP,EAA0CE,OAA1C,qBACG,gCAAeF,SAAS,CAAT,EAAYF,OAA3B,CADH,EACyC;AACrCK,gBAAU,CAD2B;AAErCC,mBAAa;AAFwB,KADzC;AAMD,GAZD;;AAcAL,KAAG,4EAAH,EAAiF,YAAM;AAAA;;AACrF,QAAMC,WAAW,CACfL,aAAa,KAAb,EAAoB,iBAApB,CADe,EAEfA,aAAa,KAAb,EAAoB,iBAApB,CAFe,EAGfA,aAAa,KAAb,EAAoB,iBAApB,CAHe,CAAjB;;AAMAM,WAAO,uCAAwBD,QAAxB,CAAP,EAA0CE,OAA1C,2DACG,gCAAeF,SAAS,CAAT,EAAYF,OAA3B,CADH,EACyC;AACrCK,gBAAU,CAD2B;AAErCC,mBAAa;AAFwB,KADzC,qCAKG,gCAAeJ,SAAS,CAAT,EAAYF,OAA3B,CALH,EAKyC;AACrCK,gBAAU,CAD2B;AAErCC,mBAAa;AAFwB,KALzC;AAUD,GAjBD;;AAmBAL,KAAG,0DAAH,EAA+D,YAAM;AAAA;;AACnE,QAAMC,WAAW,CACfL,aAAa,KAAb,EAAoB,iBAApB,CADe,EAEfA,aAAa,KAAb,EAAoB,iBAApB,CAFe,EAGfA,aAAa,KAAb,EAAoB,iBAApB,CAHe,EAIfA,aAAa,KAAb,EAAoB,iBAApB,CAJe,CAAjB;;AAOAM,WAAO,uCAAwBD,QAAxB,CAAP,EAA0CE,OAA1C,2DACG,gCAAeF,SAAS,CAAT,EAAYF,OAA3B,CADH,EACyC;AACrCK,gBAAU,CAD2B;AAErCC,mBAAa;AAFwB,KADzC,qCAKG,gCAAeJ,SAAS,CAAT,EAAYF,OAA3B,CALH,EAKyC;AACrCK,gBAAU,CAD2B;AAErCC,mBAAa;AAFwB,KALzC;AAUD,GAlBD;;AAoBAL,KAAG,gDAAH,EAAqD,YAAM;AACzDE,WAAO,uCAAwB,EAAxB,CAAP,EAAoCC,OAApC,CAA4C,EAA5C;AACD,GAFD;;AAIAH,KAAG,0DAAH,EAA+D,YAAM;AACnEE,WAAO,uCAAwB,IAAxB,CAAP,EAAsCC,OAAtC,CAA8C,EAA9C;AACD,GAFD;AAGD,CA5ED","file":"requestRepeatMapBuilder.test.js","sourcesContent":["import buildRequestId from './requestIdBuilder';\nimport requestRepeatMapBuilder from './requestRepeatMapBuilder';\n\ndescribe('requestRepeatMapBuilder', () => {\n  const buildRequest = (method, url) => ({ request: { method, url } });\n\n  it('should produce the correct map for a single requests', () => {\n    const requests = [\n      buildRequest('GET', 'http://url1.com'),\n    ];\n\n    expect(requestRepeatMapBuilder(requests)).toEqual({\n      [buildRequestId(requests[0].request)]: {\n        repeated: 1,\n        invocations: 0,\n      },\n    });\n  });\n\n  it('should produce the correct map for a repeating request', () => {\n    const requests = [\n      buildRequest('GET', 'http://url1.com'),\n      buildRequest('GET', 'http://url1.com'),\n    ];\n\n    expect(requestRepeatMapBuilder(requests)).toEqual({\n      [buildRequestId(requests[0].request)]: {\n        repeated: 2,\n        invocations: 0,\n      },\n    });\n  });\n\n  it('should produce the correct map for a single request and a repeated request', () => {\n    const requests = [\n      buildRequest('GET', 'http://url1.com'),\n      buildRequest('GET', 'http://url1.com'),\n      buildRequest('GET', 'http://url2.com'),\n    ];\n\n    expect(requestRepeatMapBuilder(requests)).toEqual({\n      [buildRequestId(requests[0].request)]: {\n        repeated: 2,\n        invocations: 0,\n      },\n      [buildRequestId(requests[2].request)]: {\n        repeated: 1,\n        invocations: 0,\n      },\n    });\n  });\n\n  it('should produce the correct map for two repeated requests', () => {\n    const requests = [\n      buildRequest('GET', 'http://url1.com'),\n      buildRequest('GET', 'http://url1.com'),\n      buildRequest('GET', 'http://url2.com'),\n      buildRequest('GET', 'http://url2.com'),\n    ];\n\n    expect(requestRepeatMapBuilder(requests)).toEqual({\n      [buildRequestId(requests[0].request)]: {\n        repeated: 2,\n        invocations: 0,\n      },\n      [buildRequestId(requests[2].request)]: {\n        repeated: 2,\n        invocations: 0,\n      },\n    });\n  });\n\n  it('should produce the correct map for no requests', () => {\n    expect(requestRepeatMapBuilder([])).toEqual({});\n  });\n\n  it('should produce the correct map for a null request object', () => {\n    expect(requestRepeatMapBuilder(null)).toEqual({});\n  });\n});\n"]}