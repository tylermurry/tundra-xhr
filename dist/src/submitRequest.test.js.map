{"version":3,"sources":["../../src/submitRequest.test.js"],"names":["describe","beforeEach","xmlHttpRequestMocks","open","jest","fn","send","setRequestHeader","global","XMLHttpRequest","it","request","expect","toBeCalledWith","toMatchSnapshot"],"mappings":";;AAAA;;;;;;AAEAA,SAAS,eAAT,EAA0B,YAAM;AAC9BC,aAAW,YAAM;AACf,QAAMC,sBAAsB;AAC1BC,YAAMC,KAAKC,EAAL,EADoB;AAE1BC,YAAMF,KAAKC,EAAL,EAFoB;AAG1BE,wBAAkBH,KAAKC,EAAL;AAHQ,KAA5B;;AAMAG,WAAOC,cAAP,GAAwB;AAAA,aAAMP,mBAAN;AAAA,KAAxB;AACD,GARD;;AAUAQ,KAAG,0CAAH,EAA+C,YAAM;AACnD,iCAAc,EAAEC,SAAS,MAAX,EAAd,EAAmC,GAAnC,EAAwC,IAAxC,EAA8CH,OAAOC,cAArD;;AAEAG,WAAOJ,OAAOC,cAAP,GAAwBN,IAA/B,EAAqCU,cAArC,CAAoD,MAApD,EAA4D,+BAA5D;AACAD,WAAOJ,OAAOC,cAAP,GAAwBF,gBAA/B,EAAiDM,cAAjD,CAAgE,cAAhE,EAAgF,kBAAhF;AACAD,WAAOJ,OAAOC,cAAP,GAAwBH,IAA/B,EAAqCQ,eAArC;AACD,GAND;;AAQAJ,KAAG,4CAAH,EAAiD,YAAM;AACrD,iCAAc,EAAEC,SAAS,MAAX,EAAd,EAAmC,GAAnC,EAAwC,KAAxC,EAA+CH,OAAOC,cAAtD;;AAEAG,WAAOJ,OAAOC,cAAP,GAAwBN,IAA/B,EAAqCU,cAArC,CAAoD,MAApD,EAA4D,8CAA5D;AACAD,WAAOJ,OAAOC,cAAP,GAAwBF,gBAA/B,EAAiDM,cAAjD,CAAgE,cAAhE,EAAgF,kBAAhF;AACAD,WAAOJ,OAAOC,cAAP,GAAwBH,IAA/B,EAAqCQ,eAArC;AACD,GAND;AAOD,CA1BD","file":"submitRequest.test.js","sourcesContent":["import submitRequest from './submitRequest';\n\ndescribe('submitRequest', () => {\n  beforeEach(() => {\n    const xmlHttpRequestMocks = {\n      open: jest.fn(),\n      send: jest.fn(),\n      setRequestHeader: jest.fn(),\n    };\n\n    global.XMLHttpRequest = () => xmlHttpRequestMocks;\n  });\n\n  it('should send the matched request properly', () => {\n    submitRequest({ request: 'data' }, 123, true, global.XMLHttpRequest);\n\n    expect(global.XMLHttpRequest().open).toBeCalledWith('POST', 'http://localhost:123/requests');\n    expect(global.XMLHttpRequest().setRequestHeader).toBeCalledWith('Content-Type', 'application/json');\n    expect(global.XMLHttpRequest().send).toMatchSnapshot();\n  });\n\n  it('should send the unmatched request properly', () => {\n    submitRequest({ request: 'data' }, 123, false, global.XMLHttpRequest);\n\n    expect(global.XMLHttpRequest().open).toBeCalledWith('POST', 'http://localhost:123/requests/type/unmatched');\n    expect(global.XMLHttpRequest().setRequestHeader).toBeCalledWith('Content-Type', 'application/json');\n    expect(global.XMLHttpRequest().send).toMatchSnapshot();\n  });\n});\n"]}